/* This file was generated by SableCC (http://www.sablecc.org/). */

package bemtevi.analysis;

import java.util.*;
import bemtevi.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramaPrograma(AProgramaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaPrograma(AProgramaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        inAProgramaPrograma(node);
        if(node.getFamilia() != null)
        {
            node.getFamilia().apply(this);
        }
        {
            List<PDefMolde> copy = new ArrayList<PDefMolde>(node.getDefMolde());
            for(PDefMolde e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramaPrograma(node);
    }

    public void inAFamiliaOpcionalFamiliaOpcional(AFamiliaOpcionalFamiliaOpcional node)
    {
        defaultIn(node);
    }

    public void outAFamiliaOpcionalFamiliaOpcional(AFamiliaOpcionalFamiliaOpcional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamiliaOpcionalFamiliaOpcional(AFamiliaOpcionalFamiliaOpcional node)
    {
        inAFamiliaOpcionalFamiliaOpcional(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outAFamiliaOpcionalFamiliaOpcional(node);
    }

    public void inAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultIn(node);
    }

    public void outAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamiliaFamilia(AFamiliaFamilia node)
    {
        inAFamiliaFamilia(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        {
            List<PFamiliaOpcional> copy = new ArrayList<PFamiliaOpcional>(node.getFamiliaOpcional());
            for(PFamiliaOpcional e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAFamiliaFamilia(node);
    }

    public void inARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultIn(node);
    }

    public void outARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacaoRelacao(ARelacaoRelacao node)
    {
        inARelacaoRelacao(node);
        if(node.getMolde() != null)
        {
            node.getMolde().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getPassa() != null)
        {
            node.getPassa().apply(this);
        }
        if(node.getPor() != null)
        {
            node.getPor().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outARelacaoRelacao(node);
    }

    public void inADefMoldeDefMolde(ADefMoldeDefMolde node)
    {
        defaultIn(node);
    }

    public void outADefMoldeDefMolde(ADefMoldeDefMolde node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefMoldeDefMolde(ADefMoldeDefMolde node)
    {
        inADefMoldeDefMolde(node);
        if(node.getMolde() != null)
        {
            node.getMolde().apply(this);
        }
        if(node.getIdMolde() != null)
        {
            node.getIdMolde().apply(this);
        }
        if(node.getContem() != null)
        {
            node.getContem().apply(this);
        }
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getMetodos() != null)
        {
            node.getMetodos().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outADefMoldeDefMolde(node);
    }

    public void inADecConsAttrAux(ADecConsAttrAux node)
    {
        defaultIn(node);
    }

    public void outADecConsAttrAux(ADecConsAttrAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsAttrAux(ADecConsAttrAux node)
    {
        inADecConsAttrAux(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsAttrAux(node);
    }

    public void inADecObjAttrAux(ADecObjAttrAux node)
    {
        defaultIn(node);
    }

    public void outADecObjAttrAux(ADecObjAttrAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjAttrAux(ADecObjAttrAux node)
    {
        inADecObjAttrAux(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjAttrAux(node);
    }

    public void inAAtributosAtributos(AAtributosAtributos node)
    {
        defaultIn(node);
    }

    public void outAAtributosAtributos(AAtributosAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributosAtributos(AAtributosAtributos node)
    {
        inAAtributosAtributos(node);
        {
            List<PAttrAux> copy = new ArrayList<PAttrAux>(node.getAttrAux());
            for(PAttrAux e : copy)
            {
                e.apply(this);
            }
        }
        outAAtributosAtributos(node);
    }

    public void inAMetodosMetodos(AMetodosMetodos node)
    {
        defaultIn(node);
    }

    public void outAMetodosMetodos(AMetodosMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMetodosMetodos(AMetodosMetodos node)
    {
        inAMetodosMetodos(node);
        {
            List<PDecFuncao> copy = new ArrayList<PDecFuncao>(node.getDecFuncao());
            for(PDecFuncao e : copy)
            {
                e.apply(this);
            }
        }
        outAMetodosMetodos(node);
    }

    public void inADecConsDecCons(ADecConsDecCons node)
    {
        defaultIn(node);
    }

    public void outADecConsDecCons(ADecConsDecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsDecCons(ADecConsDecCons node)
    {
        inADecConsDecCons(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecConsDecCons(node);
    }

    public void inADecConstInitDecCons(ADecConstInitDecCons node)
    {
        defaultIn(node);
    }

    public void outADecConstInitDecCons(ADecConstInitDecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConstInitDecCons(ADecConstInitDecCons node)
    {
        inADecConstInitDecCons(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecConstInitDecCons(node);
    }

    public void inADecObjDecObj(ADecObjDecObj node)
    {
        defaultIn(node);
    }

    public void outADecObjDecObj(ADecObjDecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjDecObj(ADecObjDecObj node)
    {
        inADecObjDecObj(node);
        if(node.getObjeto() != null)
        {
            node.getObjeto().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipoMolde() != null)
        {
            node.getTipoMolde().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecObjDecObj(node);
    }

    public void inABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        inABoolTipoPrimitivo(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolTipoPrimitivo(node);
    }

    public void inANumeroTipoPrimitivo(ANumeroTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outANumeroTipoPrimitivo(ANumeroTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTipoPrimitivo(ANumeroTipoPrimitivo node)
    {
        inANumeroTipoPrimitivo(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroTipoPrimitivo(node);
    }

    public void inATextoTipoPrimitivo(ATextoTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outATextoTipoPrimitivo(ATextoTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextoTipoPrimitivo(ATextoTipoPrimitivo node)
    {
        inATextoTipoPrimitivo(node);
        if(node.getTexto() != null)
        {
            node.getTexto().apply(this);
        }
        outATextoTipoPrimitivo(node);
    }

    public void inATipoMoldeTipoMolde(ATipoMoldeTipoMolde node)
    {
        defaultIn(node);
    }

    public void outATipoMoldeTipoMolde(ATipoMoldeTipoMolde node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoMoldeTipoMolde(ATipoMoldeTipoMolde node)
    {
        inATipoMoldeTipoMolde(node);
        if(node.getIdMolde() != null)
        {
            node.getIdMolde().apply(this);
        }
        outATipoMoldeTipoMolde(node);
    }

    public void inATipoMoldeTipo(ATipoMoldeTipo node)
    {
        defaultIn(node);
    }

    public void outATipoMoldeTipo(ATipoMoldeTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoMoldeTipo(ATipoMoldeTipo node)
    {
        inATipoMoldeTipo(node);
        if(node.getTipoMolde() != null)
        {
            node.getTipoMolde().apply(this);
        }
        outATipoMoldeTipo(node);
    }

    public void inATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        inATipoPrimitivoTipo(node);
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        outATipoPrimitivoTipo(node);
    }

    public void inADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        inADecFuncaoDecFuncao(node);
        if(node.getDoisMaior() != null)
        {
            node.getDoisMaior().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFe() != null)
        {
            node.getFe().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getFd() != null)
        {
            node.getFd().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outADecFuncaoDecFuncao(node);
    }

    public void inADecFuncaoSemBlocoDecFuncao(ADecFuncaoSemBlocoDecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoSemBlocoDecFuncao(ADecFuncaoSemBlocoDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoSemBlocoDecFuncao(ADecFuncaoSemBlocoDecFuncao node)
    {
        inADecFuncaoSemBlocoDecFuncao(node);
        if(node.getDoisMaior() != null)
        {
            node.getDoisMaior().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFwbe() != null)
        {
            node.getFwbe().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getFwbd() != null)
        {
            node.getFwbd().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecFuncaoSemBlocoDecFuncao(node);
    }

    public void inAMaisParametroMaisParametro(AMaisParametroMaisParametro node)
    {
        defaultIn(node);
    }

    public void outAMaisParametroMaisParametro(AMaisParametroMaisParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisParametroMaisParametro(AMaisParametroMaisParametro node)
    {
        inAMaisParametroMaisParametro(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAMaisParametroMaisParametro(node);
    }

    public void inAParametrosParametros(AParametrosParametros node)
    {
        defaultIn(node);
    }

    public void outAParametrosParametros(AParametrosParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosParametros(AParametrosParametros node)
    {
        inAParametrosParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        {
            List<PMaisParametro> copy = new ArrayList<PMaisParametro>(node.getMaisParametro());
            for(PMaisParametro e : copy)
            {
                e.apply(this);
            }
        }
        outAParametrosParametros(node);
    }

    public void inAParametroParametro(AParametroParametro node)
    {
        defaultIn(node);
    }

    public void outAParametroParametro(AParametroParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametro(AParametroParametro node)
    {
        inAParametroParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametroParametro(node);
    }

    public void inAAssinaturaParametro(AAssinaturaParametro node)
    {
        defaultIn(node);
    }

    public void outAAssinaturaParametro(AAssinaturaParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssinaturaParametro(AAssinaturaParametro node)
    {
        inAAssinaturaParametro(node);
        if(node.getAssinatura() != null)
        {
            node.getAssinatura().apply(this);
        }
        outAAssinaturaParametro(node);
    }

    public void inAAssinaturaAssinatura(AAssinaturaAssinatura node)
    {
        defaultIn(node);
    }

    public void outAAssinaturaAssinatura(AAssinaturaAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssinaturaAssinatura(AAssinaturaAssinatura node)
    {
        inAAssinaturaAssinatura(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getParametrosAssinatura() != null)
        {
            node.getParametrosAssinatura().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAAssinaturaAssinatura(node);
    }

    public void inAMaisParametrosAssinaturaMaisParametrosAssinatura(AMaisParametrosAssinaturaMaisParametrosAssinatura node)
    {
        defaultIn(node);
    }

    public void outAMaisParametrosAssinaturaMaisParametrosAssinatura(AMaisParametrosAssinaturaMaisParametrosAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisParametrosAssinaturaMaisParametrosAssinatura(AMaisParametrosAssinaturaMaisParametrosAssinatura node)
    {
        inAMaisParametrosAssinaturaMaisParametrosAssinatura(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getParametroAssinatura() != null)
        {
            node.getParametroAssinatura().apply(this);
        }
        outAMaisParametrosAssinaturaMaisParametrosAssinatura(node);
    }

    public void inAParametrosAssinaturaParametrosAssinatura(AParametrosAssinaturaParametrosAssinatura node)
    {
        defaultIn(node);
    }

    public void outAParametrosAssinaturaParametrosAssinatura(AParametrosAssinaturaParametrosAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosAssinaturaParametrosAssinatura(AParametrosAssinaturaParametrosAssinatura node)
    {
        inAParametrosAssinaturaParametrosAssinatura(node);
        if(node.getParametroAssinatura() != null)
        {
            node.getParametroAssinatura().apply(this);
        }
        {
            List<PMaisParametrosAssinatura> copy = new ArrayList<PMaisParametrosAssinatura>(node.getMaisParametrosAssinatura());
            for(PMaisParametrosAssinatura e : copy)
            {
                e.apply(this);
            }
        }
        outAParametrosAssinaturaParametrosAssinatura(node);
    }

    public void inATipoParametroAssinatura(ATipoParametroAssinatura node)
    {
        defaultIn(node);
    }

    public void outATipoParametroAssinatura(ATipoParametroAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoParametroAssinatura(ATipoParametroAssinatura node)
    {
        inATipoParametroAssinatura(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoParametroAssinatura(node);
    }

    public void inAAssinaturaParametroAssinatura(AAssinaturaParametroAssinatura node)
    {
        defaultIn(node);
    }

    public void outAAssinaturaParametroAssinatura(AAssinaturaParametroAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssinaturaParametroAssinatura(AAssinaturaParametroAssinatura node)
    {
        inAAssinaturaParametroAssinatura(node);
        if(node.getAssinatura() != null)
        {
            node.getAssinatura().apply(this);
        }
        outAAssinaturaParametroAssinatura(node);
    }

    public void inADecConsConteudoBloco(ADecConsConteudoBloco node)
    {
        defaultIn(node);
    }

    public void outADecConsConteudoBloco(ADecConsConteudoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsConteudoBloco(ADecConsConteudoBloco node)
    {
        inADecConsConteudoBloco(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsConteudoBloco(node);
    }

    public void inADecObjConteudoBloco(ADecObjConteudoBloco node)
    {
        defaultIn(node);
    }

    public void outADecObjConteudoBloco(ADecObjConteudoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjConteudoBloco(ADecObjConteudoBloco node)
    {
        inADecObjConteudoBloco(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjConteudoBloco(node);
    }

    public void inADefinicaoConteudoBloco(ADefinicaoConteudoBloco node)
    {
        defaultIn(node);
    }

    public void outADefinicaoConteudoBloco(ADefinicaoConteudoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinicaoConteudoBloco(ADefinicaoConteudoBloco node)
    {
        inADefinicaoConteudoBloco(node);
        if(node.getDefinicao() != null)
        {
            node.getDefinicao().apply(this);
        }
        outADefinicaoConteudoBloco(node);
    }

    public void inABlocoBloco(ABlocoBloco node)
    {
        defaultIn(node);
    }

    public void outABlocoBloco(ABlocoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoBloco(ABlocoBloco node)
    {
        inABlocoBloco(node);
        if(node.getAbreBloco() != null)
        {
            node.getAbreBloco().apply(this);
        }
        {
            List<PConteudoBloco> copy = new ArrayList<PConteudoBloco>(node.getConteudoBloco());
            for(PConteudoBloco e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFechaBloco() != null)
        {
            node.getFechaBloco().apply(this);
        }
        outABlocoBloco(node);
    }

    public void inADefinicaoDefinicao(ADefinicaoDefinicao node)
    {
        defaultIn(node);
    }

    public void outADefinicaoDefinicao(ADefinicaoDefinicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinicaoDefinicao(ADefinicaoDefinicao node)
    {
        inADefinicaoDefinicao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADefinicaoDefinicao(node);
    }

    public void inAMaisIdMaisId(AMaisIdMaisId node)
    {
        defaultIn(node);
    }

    public void outAMaisIdMaisId(AMaisIdMaisId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisIdMaisId(AMaisIdMaisId node)
    {
        inAMaisIdMaisId(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMaisIdMaisId(node);
    }

    public void inAAtributoAtributo(AAtributoAtributo node)
    {
        defaultIn(node);
    }

    public void outAAtributoAtributo(AAtributoAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoAtributo(AAtributoAtributo node)
    {
        inAAtributoAtributo(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PMaisId> copy = new ArrayList<PMaisId>(node.getMaisId());
            for(PMaisId e : copy)
            {
                e.apply(this);
            }
        }
        outAAtributoAtributo(node);
    }

    public void inASeSenaoSeSenao(ASeSenaoSeSenao node)
    {
        defaultIn(node);
    }

    public void outASeSenaoSeSenao(ASeSenaoSeSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoSeSenao(ASeSenaoSeSenao node)
    {
        inASeSenaoSeSenao(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getPrimeira() != null)
        {
            node.getPrimeira().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getSegunda() != null)
        {
            node.getSegunda().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getTerceira() != null)
        {
            node.getTerceira().apply(this);
        }
        outASeSenaoSeSenao(node);
    }

    public void inATermoExp(ATermoExp node)
    {
        defaultIn(node);
    }

    public void outATermoExp(ATermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExp(ATermoExp node)
    {
        inATermoExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outASomaExp(node);
    }

    public void inAMenosExp(AMenosExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExp(AMenosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        inAMenosExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMenosExp(node);
    }

    public void inAMenorExp(AMenorExp node)
    {
        defaultIn(node);
    }

    public void outAMenorExp(AMenorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp(AMenorExp node)
    {
        inAMenorExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMenorExp(node);
    }

    public void inAIgualExp(AIgualExp node)
    {
        defaultIn(node);
    }

    public void outAIgualExp(AIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp(AIgualExp node)
    {
        inAIgualExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAIgualExp(node);
    }

    public void inAMenorIgualExp(AMenorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExp(AMenorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExp(AMenorIgualExp node)
    {
        inAMenorIgualExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMenorIgualExp(node);
    }

    public void inANegacaoExp(ANegacaoExp node)
    {
        defaultIn(node);
    }

    public void outANegacaoExp(ANegacaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegacaoExp(ANegacaoExp node)
    {
        inANegacaoExp(node);
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        if(node.getExpBool() != null)
        {
            node.getExpBool().apply(this);
        }
        outANegacaoExp(node);
    }

    public void inANegativoExp(ANegativoExp node)
    {
        defaultIn(node);
    }

    public void outANegativoExp(ANegativoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoExp(ANegativoExp node)
    {
        inANegativoExp(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outANegativoExp(node);
    }

    public void inAEExp(AEExp node)
    {
        defaultIn(node);
    }

    public void outAEExp(AEExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExp(AEExp node)
    {
        inAEExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAEExp(node);
    }

    public void inAOuExp(AOuExp node)
    {
        defaultIn(node);
    }

    public void outAOuExp(AOuExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        inAOuExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAOuExp(node);
    }

    public void inABlocoExp(ABlocoExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExp(ABlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExp(ABlocoExp node)
    {
        inABlocoExp(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoExp(node);
    }

    public void inAVerdadeExpBool(AVerdadeExpBool node)
    {
        defaultIn(node);
    }

    public void outAVerdadeExpBool(AVerdadeExpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVerdadeExpBool(AVerdadeExpBool node)
    {
        inAVerdadeExpBool(node);
        if(node.getVerdade() != null)
        {
            node.getVerdade().apply(this);
        }
        outAVerdadeExpBool(node);
    }

    public void inAFalsoExpBool(AFalsoExpBool node)
    {
        defaultIn(node);
    }

    public void outAFalsoExpBool(AFalsoExpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalsoExpBool(AFalsoExpBool node)
    {
        inAFalsoExpBool(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outAFalsoExpBool(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAMultTermo(AMultTermo node)
    {
        defaultIn(node);
    }

    public void outAMultTermo(AMultTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTermo(AMultTermo node)
    {
        inAMultTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultTermo(node);
    }

    public void inADivTermo(ADivTermo node)
    {
        defaultIn(node);
    }

    public void outADivTermo(ADivTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTermo(ADivTermo node)
    {
        inADivTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outADivTermo(node);
    }

    public void inAModTermo(AModTermo node)
    {
        defaultIn(node);
    }

    public void outAModTermo(AModTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModTermo(AModTermo node)
    {
        inAModTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAModTermo(node);
    }

    public void inANumerosFator(ANumerosFator node)
    {
        defaultIn(node);
    }

    public void outANumerosFator(ANumerosFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumerosFator(ANumerosFator node)
    {
        inANumerosFator(node);
        if(node.getNumeros() != null)
        {
            node.getNumeros().apply(this);
        }
        outANumerosFator(node);
    }

    public void inAStringFator(AStringFator node)
    {
        defaultIn(node);
    }

    public void outAStringFator(AStringFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringFator(AStringFator node)
    {
        inAStringFator(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringFator(node);
    }

    public void inABoolFator(ABoolFator node)
    {
        defaultIn(node);
    }

    public void outABoolFator(ABoolFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolFator(ABoolFator node)
    {
        inABoolFator(node);
        if(node.getExpBool() != null)
        {
            node.getExpBool().apply(this);
        }
        outABoolFator(node);
    }

    public void inAParentesesFator(AParentesesFator node)
    {
        defaultIn(node);
    }

    public void outAParentesesFator(AParentesesFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesFator(AParentesesFator node)
    {
        inAParentesesFator(node);
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAParentesesFator(node);
    }

    public void inAInstanciaFator(AInstanciaFator node)
    {
        defaultIn(node);
    }

    public void outAInstanciaFator(AInstanciaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanciaFator(AInstanciaFator node)
    {
        inAInstanciaFator(node);
        if(node.getInstancia() != null)
        {
            node.getInstancia().apply(this);
        }
        outAInstanciaFator(node);
    }

    public void inAChamadaFator(AChamadaFator node)
    {
        defaultIn(node);
    }

    public void outAChamadaFator(AChamadaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFator(AChamadaFator node)
    {
        inAChamadaFator(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaFator(node);
    }

    public void inAIdFator(AIdFator node)
    {
        defaultIn(node);
    }

    public void outAIdFator(AIdFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFator(AIdFator node)
    {
        inAIdFator(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdFator(node);
    }

    public void inAAtributoFator(AAtributoFator node)
    {
        defaultIn(node);
    }

    public void outAAtributoFator(AAtributoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoFator(AAtributoFator node)
    {
        inAAtributoFator(node);
        if(node.getAtributo() != null)
        {
            node.getAtributo().apply(this);
        }
        outAAtributoFator(node);
    }

    public void inAInstanciaInstancia(AInstanciaInstancia node)
    {
        defaultIn(node);
    }

    public void outAInstanciaInstancia(AInstanciaInstancia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanciaInstancia(AInstanciaInstancia node)
    {
        inAInstanciaInstancia(node);
        if(node.getIdMolde() != null)
        {
            node.getIdMolde().apply(this);
        }
        if(node.getAbreBloco() != null)
        {
            node.getAbreBloco().apply(this);
        }
        if(node.getListaInicializacao() != null)
        {
            node.getListaInicializacao().apply(this);
        }
        if(node.getFechaBloco() != null)
        {
            node.getFechaBloco().apply(this);
        }
        outAInstanciaInstancia(node);
    }

    public void inAMaisInicializacaoObjetoMaisInicializacaoObjeto(AMaisInicializacaoObjetoMaisInicializacaoObjeto node)
    {
        defaultIn(node);
    }

    public void outAMaisInicializacaoObjetoMaisInicializacaoObjeto(AMaisInicializacaoObjetoMaisInicializacaoObjeto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisInicializacaoObjetoMaisInicializacaoObjeto(AMaisInicializacaoObjetoMaisInicializacaoObjeto node)
    {
        inAMaisInicializacaoObjetoMaisInicializacaoObjeto(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getInicializacaoObjeto() != null)
        {
            node.getInicializacaoObjeto().apply(this);
        }
        outAMaisInicializacaoObjetoMaisInicializacaoObjeto(node);
    }

    public void inAListaInicializacaoListaInicializacao(AListaInicializacaoListaInicializacao node)
    {
        defaultIn(node);
    }

    public void outAListaInicializacaoListaInicializacao(AListaInicializacaoListaInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaInicializacaoListaInicializacao(AListaInicializacaoListaInicializacao node)
    {
        inAListaInicializacaoListaInicializacao(node);
        if(node.getInicializacaoObjeto() != null)
        {
            node.getInicializacaoObjeto().apply(this);
        }
        {
            List<PMaisInicializacaoObjeto> copy = new ArrayList<PMaisInicializacaoObjeto>(node.getMaisInicializacaoObjeto());
            for(PMaisInicializacaoObjeto e : copy)
            {
                e.apply(this);
            }
        }
        outAListaInicializacaoListaInicializacao(node);
    }

    public void inAInicializacaoObjetoInicializacaoObjeto(AInicializacaoObjetoInicializacaoObjeto node)
    {
        defaultIn(node);
    }

    public void outAInicializacaoObjetoInicializacaoObjeto(AInicializacaoObjetoInicializacaoObjeto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicializacaoObjetoInicializacaoObjeto(AInicializacaoObjetoInicializacaoObjeto node)
    {
        inAInicializacaoObjetoInicializacaoObjeto(node);
        if(node.getObjeto() != null)
        {
            node.getObjeto().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PMaisId> copy = new ArrayList<PMaisId>(node.getMaisId());
            for(PMaisId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        outAInicializacaoObjetoInicializacaoObjeto(node);
    }

    public void inAChamadaChamada(AChamadaChamada node)
    {
        defaultIn(node);
    }

    public void outAChamadaChamada(AChamadaChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaChamada(AChamadaChamada node)
    {
        inAChamadaChamada(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PMaisId> copy = new ArrayList<PMaisId>(node.getMaisId());
            for(PMaisId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAChamadaChamada(node);
    }

    public void inAMaisExpMaisExp(AMaisExpMaisExp node)
    {
        defaultIn(node);
    }

    public void outAMaisExpMaisExp(AMaisExpMaisExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExpMaisExp(AMaisExpMaisExp node)
    {
        inAMaisExpMaisExp(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisExpMaisExp(node);
    }

    public void inAListaExpListaExp(AListaExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpListaExp(AListaExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        inAListaExpListaExp(node);
        if(node.getLista() != null)
        {
            node.getLista().apply(this);
        }
        {
            List<PMaisExp> copy = new ArrayList<PMaisExp>(node.getMaisExp());
            for(PMaisExp e : copy)
            {
                e.apply(this);
            }
        }
        outAListaExpListaExp(node);
    }
}
