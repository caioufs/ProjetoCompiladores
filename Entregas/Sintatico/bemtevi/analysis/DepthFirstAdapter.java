/* This file was generated by SableCC (http://www.sablecc.org/). */

package bemtevi.analysis;

import java.util.*;
import bemtevi.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramaPrograma(AProgramaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaPrograma(AProgramaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        inAProgramaPrograma(node);
        if(node.getFamilia() != null)
        {
            node.getFamilia().apply(this);
        }
        {
            List<PDefMolde> copy = new ArrayList<PDefMolde>(node.getDefMolde());
            for(PDefMolde e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramaPrograma(node);
    }

    public void inAFamiliaOpcionalFamiliaOpcional(AFamiliaOpcionalFamiliaOpcional node)
    {
        defaultIn(node);
    }

    public void outAFamiliaOpcionalFamiliaOpcional(AFamiliaOpcionalFamiliaOpcional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamiliaOpcionalFamiliaOpcional(AFamiliaOpcionalFamiliaOpcional node)
    {
        inAFamiliaOpcionalFamiliaOpcional(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outAFamiliaOpcionalFamiliaOpcional(node);
    }

    public void inAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultIn(node);
    }

    public void outAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamiliaFamilia(AFamiliaFamilia node)
    {
        inAFamiliaFamilia(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        {
            List<PFamiliaOpcional> copy = new ArrayList<PFamiliaOpcional>(node.getFamiliaOpcional());
            for(PFamiliaOpcional e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAFamiliaFamilia(node);
    }

    public void inARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultIn(node);
    }

    public void outARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacaoRelacao(ARelacaoRelacao node)
    {
        inARelacaoRelacao(node);
        if(node.getMolde() != null)
        {
            node.getMolde().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getPassa() != null)
        {
            node.getPassa().apply(this);
        }
        if(node.getPor() != null)
        {
            node.getPor().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outARelacaoRelacao(node);
    }

    public void inADefMoldeDefMolde(ADefMoldeDefMolde node)
    {
        defaultIn(node);
    }

    public void outADefMoldeDefMolde(ADefMoldeDefMolde node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefMoldeDefMolde(ADefMoldeDefMolde node)
    {
        inADefMoldeDefMolde(node);
        if(node.getMolde() != null)
        {
            node.getMolde().apply(this);
        }
        if(node.getIdMolde() != null)
        {
            node.getIdMolde().apply(this);
        }
        if(node.getContem() != null)
        {
            node.getContem().apply(this);
        }
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getMetodos() != null)
        {
            node.getMetodos().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outADefMoldeDefMolde(node);
    }

    public void inADecConsAttrAux(ADecConsAttrAux node)
    {
        defaultIn(node);
    }

    public void outADecConsAttrAux(ADecConsAttrAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsAttrAux(ADecConsAttrAux node)
    {
        inADecConsAttrAux(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsAttrAux(node);
    }

    public void inADecObjAttrAux(ADecObjAttrAux node)
    {
        defaultIn(node);
    }

    public void outADecObjAttrAux(ADecObjAttrAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjAttrAux(ADecObjAttrAux node)
    {
        inADecObjAttrAux(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjAttrAux(node);
    }

    public void inAAtributosAtributos(AAtributosAtributos node)
    {
        defaultIn(node);
    }

    public void outAAtributosAtributos(AAtributosAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributosAtributos(AAtributosAtributos node)
    {
        inAAtributosAtributos(node);
        {
            List<PAttrAux> copy = new ArrayList<PAttrAux>(node.getAttrAux());
            for(PAttrAux e : copy)
            {
                e.apply(this);
            }
        }
        outAAtributosAtributos(node);
    }

    public void inAMetodosMetodos(AMetodosMetodos node)
    {
        defaultIn(node);
    }

    public void outAMetodosMetodos(AMetodosMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMetodosMetodos(AMetodosMetodos node)
    {
        inAMetodosMetodos(node);
        {
            List<PDecFuncao> copy = new ArrayList<PDecFuncao>(node.getDecFuncao());
            for(PDecFuncao e : copy)
            {
                e.apply(this);
            }
        }
        outAMetodosMetodos(node);
    }

    public void inADecConsDecCons(ADecConsDecCons node)
    {
        defaultIn(node);
    }

    public void outADecConsDecCons(ADecConsDecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsDecCons(ADecConsDecCons node)
    {
        inADecConsDecCons(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecConsDecCons(node);
    }

    public void inADecObjDecObj(ADecObjDecObj node)
    {
        defaultIn(node);
    }

    public void outADecObjDecObj(ADecObjDecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjDecObj(ADecObjDecObj node)
    {
        inADecObjDecObj(node);
        if(node.getObjeto() != null)
        {
            node.getObjeto().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipoMolde() != null)
        {
            node.getTipoMolde().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecObjDecObj(node);
    }

    public void inABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        inABoolTipoPrimitivo(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolTipoPrimitivo(node);
    }

    public void inANumeroTipoPrimitivo(ANumeroTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outANumeroTipoPrimitivo(ANumeroTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTipoPrimitivo(ANumeroTipoPrimitivo node)
    {
        inANumeroTipoPrimitivo(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroTipoPrimitivo(node);
    }

    public void inATextoTipoPrimitivo(ATextoTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outATextoTipoPrimitivo(ATextoTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextoTipoPrimitivo(ATextoTipoPrimitivo node)
    {
        inATextoTipoPrimitivo(node);
        if(node.getTexto() != null)
        {
            node.getTexto().apply(this);
        }
        outATextoTipoPrimitivo(node);
    }

    public void inATipoMoldeTipoMolde(ATipoMoldeTipoMolde node)
    {
        defaultIn(node);
    }

    public void outATipoMoldeTipoMolde(ATipoMoldeTipoMolde node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoMoldeTipoMolde(ATipoMoldeTipoMolde node)
    {
        inATipoMoldeTipoMolde(node);
        if(node.getIdMolde() != null)
        {
            node.getIdMolde().apply(this);
        }
        outATipoMoldeTipoMolde(node);
    }

    public void inATipoMoldeTipo(ATipoMoldeTipo node)
    {
        defaultIn(node);
    }

    public void outATipoMoldeTipo(ATipoMoldeTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoMoldeTipo(ATipoMoldeTipo node)
    {
        inATipoMoldeTipo(node);
        if(node.getTipoMolde() != null)
        {
            node.getTipoMolde().apply(this);
        }
        outATipoMoldeTipo(node);
    }

    public void inATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        inATipoPrimitivoTipo(node);
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        outATipoPrimitivoTipo(node);
    }

    public void inADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        inADecFuncaoDecFuncao(node);
        if(node.getDoisMaior() != null)
        {
            node.getDoisMaior().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFe() != null)
        {
            node.getFe().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getFd() != null)
        {
            node.getFd().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outADecFuncaoDecFuncao(node);
    }

    public void inADecFuncaoSemBlocoDecFuncao(ADecFuncaoSemBlocoDecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoSemBlocoDecFuncao(ADecFuncaoSemBlocoDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoSemBlocoDecFuncao(ADecFuncaoSemBlocoDecFuncao node)
    {
        inADecFuncaoSemBlocoDecFuncao(node);
        if(node.getDoisMaior() != null)
        {
            node.getDoisMaior().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFwbe() != null)
        {
            node.getFwbe().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getFwbd() != null)
        {
            node.getFwbd().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecFuncaoSemBlocoDecFuncao(node);
    }

    public void inAMaisParametroMaisParametro(AMaisParametroMaisParametro node)
    {
        defaultIn(node);
    }

    public void outAMaisParametroMaisParametro(AMaisParametroMaisParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisParametroMaisParametro(AMaisParametroMaisParametro node)
    {
        inAMaisParametroMaisParametro(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAMaisParametroMaisParametro(node);
    }

    public void inAParametrosParametros(AParametrosParametros node)
    {
        defaultIn(node);
    }

    public void outAParametrosParametros(AParametrosParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosParametros(AParametrosParametros node)
    {
        inAParametrosParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        {
            List<PMaisParametro> copy = new ArrayList<PMaisParametro>(node.getMaisParametro());
            for(PMaisParametro e : copy)
            {
                e.apply(this);
            }
        }
        outAParametrosParametros(node);
    }

    public void inAParametroParametro(AParametroParametro node)
    {
        defaultIn(node);
    }

    public void outAParametroParametro(AParametroParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametro(AParametroParametro node)
    {
        inAParametroParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametroParametro(node);
    }

    public void inAAssinaturaParametro(AAssinaturaParametro node)
    {
        defaultIn(node);
    }

    public void outAAssinaturaParametro(AAssinaturaParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssinaturaParametro(AAssinaturaParametro node)
    {
        inAAssinaturaParametro(node);
        if(node.getAssinatura() != null)
        {
            node.getAssinatura().apply(this);
        }
        outAAssinaturaParametro(node);
    }

    public void inAAssinaturaAssinatura(AAssinaturaAssinatura node)
    {
        defaultIn(node);
    }

    public void outAAssinaturaAssinatura(AAssinaturaAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssinaturaAssinatura(AAssinaturaAssinatura node)
    {
        inAAssinaturaAssinatura(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getParametrosAssinatura() != null)
        {
            node.getParametrosAssinatura().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAAssinaturaAssinatura(node);
    }

    public void inAMaisParametrosAssinaturaMaisParametrosAssinatura(AMaisParametrosAssinaturaMaisParametrosAssinatura node)
    {
        defaultIn(node);
    }

    public void outAMaisParametrosAssinaturaMaisParametrosAssinatura(AMaisParametrosAssinaturaMaisParametrosAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisParametrosAssinaturaMaisParametrosAssinatura(AMaisParametrosAssinaturaMaisParametrosAssinatura node)
    {
        inAMaisParametrosAssinaturaMaisParametrosAssinatura(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getParametroAssinatura() != null)
        {
            node.getParametroAssinatura().apply(this);
        }
        outAMaisParametrosAssinaturaMaisParametrosAssinatura(node);
    }

    public void inAParametrosAssinaturaParametrosAssinatura(AParametrosAssinaturaParametrosAssinatura node)
    {
        defaultIn(node);
    }

    public void outAParametrosAssinaturaParametrosAssinatura(AParametrosAssinaturaParametrosAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosAssinaturaParametrosAssinatura(AParametrosAssinaturaParametrosAssinatura node)
    {
        inAParametrosAssinaturaParametrosAssinatura(node);
        if(node.getParametroAssinatura() != null)
        {
            node.getParametroAssinatura().apply(this);
        }
        {
            List<PMaisParametrosAssinatura> copy = new ArrayList<PMaisParametrosAssinatura>(node.getMaisParametrosAssinatura());
            for(PMaisParametrosAssinatura e : copy)
            {
                e.apply(this);
            }
        }
        outAParametrosAssinaturaParametrosAssinatura(node);
    }

    public void inATipoParametroAssinatura(ATipoParametroAssinatura node)
    {
        defaultIn(node);
    }

    public void outATipoParametroAssinatura(ATipoParametroAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoParametroAssinatura(ATipoParametroAssinatura node)
    {
        inATipoParametroAssinatura(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoParametroAssinatura(node);
    }

    public void inAAssinaturaParametroAssinatura(AAssinaturaParametroAssinatura node)
    {
        defaultIn(node);
    }

    public void outAAssinaturaParametroAssinatura(AAssinaturaParametroAssinatura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssinaturaParametroAssinatura(AAssinaturaParametroAssinatura node)
    {
        inAAssinaturaParametroAssinatura(node);
        if(node.getAssinatura() != null)
        {
            node.getAssinatura().apply(this);
        }
        outAAssinaturaParametroAssinatura(node);
    }

    public void inADecConsConteudoBloco(ADecConsConteudoBloco node)
    {
        defaultIn(node);
    }

    public void outADecConsConteudoBloco(ADecConsConteudoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsConteudoBloco(ADecConsConteudoBloco node)
    {
        inADecConsConteudoBloco(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsConteudoBloco(node);
    }

    public void inADecObjConteudoBloco(ADecObjConteudoBloco node)
    {
        defaultIn(node);
    }

    public void outADecObjConteudoBloco(ADecObjConteudoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjConteudoBloco(ADecObjConteudoBloco node)
    {
        inADecObjConteudoBloco(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjConteudoBloco(node);
    }

    public void inADefinicaoConteudoBloco(ADefinicaoConteudoBloco node)
    {
        defaultIn(node);
    }

    public void outADefinicaoConteudoBloco(ADefinicaoConteudoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinicaoConteudoBloco(ADefinicaoConteudoBloco node)
    {
        inADefinicaoConteudoBloco(node);
        if(node.getDefinicao() != null)
        {
            node.getDefinicao().apply(this);
        }
        outADefinicaoConteudoBloco(node);
    }

    public void inABlocoBloco(ABlocoBloco node)
    {
        defaultIn(node);
    }

    public void outABlocoBloco(ABlocoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoBloco(ABlocoBloco node)
    {
        inABlocoBloco(node);
        if(node.getAbreBloco() != null)
        {
            node.getAbreBloco().apply(this);
        }
        {
            List<PConteudoBloco> copy = new ArrayList<PConteudoBloco>(node.getConteudoBloco());
            for(PConteudoBloco e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaBloco() != null)
        {
            node.getFechaBloco().apply(this);
        }
        outABlocoBloco(node);
    }

    public void inAIdConteudoDefinicao(AIdConteudoDefinicao node)
    {
        defaultIn(node);
    }

    public void outAIdConteudoDefinicao(AIdConteudoDefinicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdConteudoDefinicao(AIdConteudoDefinicao node)
    {
        inAIdConteudoDefinicao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdConteudoDefinicao(node);
    }

    public void inAAtributoConteudoDefinicao(AAtributoConteudoDefinicao node)
    {
        defaultIn(node);
    }

    public void outAAtributoConteudoDefinicao(AAtributoConteudoDefinicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoConteudoDefinicao(AAtributoConteudoDefinicao node)
    {
        inAAtributoConteudoDefinicao(node);
        if(node.getAtributo() != null)
        {
            node.getAtributo().apply(this);
        }
        outAAtributoConteudoDefinicao(node);
    }

    public void inADefinicaoDefinicao(ADefinicaoDefinicao node)
    {
        defaultIn(node);
    }

    public void outADefinicaoDefinicao(ADefinicaoDefinicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinicaoDefinicao(ADefinicaoDefinicao node)
    {
        inADefinicaoDefinicao(node);
        if(node.getConteudoDefinicao() != null)
        {
            node.getConteudoDefinicao().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADefinicaoDefinicao(node);
    }

    public void inAMaisAtributoMaisAtributo(AMaisAtributoMaisAtributo node)
    {
        defaultIn(node);
    }

    public void outAMaisAtributoMaisAtributo(AMaisAtributoMaisAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisAtributoMaisAtributo(AMaisAtributoMaisAtributo node)
    {
        inAMaisAtributoMaisAtributo(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMaisAtributoMaisAtributo(node);
    }

    public void inAAtributoAtributo(AAtributoAtributo node)
    {
        defaultIn(node);
    }

    public void outAAtributoAtributo(AAtributoAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoAtributo(AAtributoAtributo node)
    {
        inAAtributoAtributo(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PMaisAtributo> copy = new ArrayList<PMaisAtributo>(node.getMaisAtributo());
            for(PMaisAtributo e : copy)
            {
                e.apply(this);
            }
        }
        outAAtributoAtributo(node);
    }

    public void inAFatorExp(AFatorExp node)
    {
        defaultIn(node);
    }

    public void outAFatorExp(AFatorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExp(AFatorExp node)
    {
        inAFatorExp(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outASomaExp(node);
    }

    public void inAMenosExp(AMenosExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExp(AMenosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        inAMenosExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMenosExp(node);
    }

    public void inATermoFator(ATermoFator node)
    {
        defaultIn(node);
    }

    public void outATermoFator(ATermoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoFator(ATermoFator node)
    {
        inATermoFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoFator(node);
    }

    public void inAMultFator(AMultFator node)
    {
        defaultIn(node);
    }

    public void outAMultFator(AMultFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFator(AMultFator node)
    {
        inAMultFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMultFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outADivFator(node);
    }

    public void inAModFator(AModFator node)
    {
        defaultIn(node);
    }

    public void outAModFator(AModFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFator(AModFator node)
    {
        inAModFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAModFator(node);
    }

    public void inANumerosTermo(ANumerosTermo node)
    {
        defaultIn(node);
    }

    public void outANumerosTermo(ANumerosTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumerosTermo(ANumerosTermo node)
    {
        inANumerosTermo(node);
        if(node.getNumeros() != null)
        {
            node.getNumeros().apply(this);
        }
        outANumerosTermo(node);
    }

    public void inATermosTermo(ATermosTermo node)
    {
        defaultIn(node);
    }

    public void outATermosTermo(ATermosTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermosTermo(ATermosTermo node)
    {
        inATermosTermo(node);
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outATermosTermo(node);
    }
}
