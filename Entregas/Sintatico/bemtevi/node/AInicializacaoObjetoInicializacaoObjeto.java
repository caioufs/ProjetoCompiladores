/* This file was generated by SableCC (http://www.sablecc.org/). */

package bemtevi.node;

import java.util.*;
import bemtevi.analysis.*;

@SuppressWarnings("nls")
public final class AInicializacaoObjetoInicializacaoObjeto extends PInicializacaoObjeto
{
    private TObjeto _objeto_;
    private TPonto _ponto_;
    private TId _id_;
    private final LinkedList<PMaisId> _maisId_ = new LinkedList<PMaisId>();
    private TIgual _igual_;
    private PExp _init_;

    public AInicializacaoObjetoInicializacaoObjeto()
    {
        // Constructor
    }

    public AInicializacaoObjetoInicializacaoObjeto(
        @SuppressWarnings("hiding") TObjeto _objeto_,
        @SuppressWarnings("hiding") TPonto _ponto_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<?> _maisId_,
        @SuppressWarnings("hiding") TIgual _igual_,
        @SuppressWarnings("hiding") PExp _init_)
    {
        // Constructor
        setObjeto(_objeto_);

        setPonto(_ponto_);

        setId(_id_);

        setMaisId(_maisId_);

        setIgual(_igual_);

        setInit(_init_);

    }

    @Override
    public Object clone()
    {
        return new AInicializacaoObjetoInicializacaoObjeto(
            cloneNode(this._objeto_),
            cloneNode(this._ponto_),
            cloneNode(this._id_),
            cloneList(this._maisId_),
            cloneNode(this._igual_),
            cloneNode(this._init_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInicializacaoObjetoInicializacaoObjeto(this);
    }

    public TObjeto getObjeto()
    {
        return this._objeto_;
    }

    public void setObjeto(TObjeto node)
    {
        if(this._objeto_ != null)
        {
            this._objeto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._objeto_ = node;
    }

    public TPonto getPonto()
    {
        return this._ponto_;
    }

    public void setPonto(TPonto node)
    {
        if(this._ponto_ != null)
        {
            this._ponto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ponto_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PMaisId> getMaisId()
    {
        return this._maisId_;
    }

    public void setMaisId(List<?> list)
    {
        for(PMaisId e : this._maisId_)
        {
            e.parent(null);
        }
        this._maisId_.clear();

        for(Object obj_e : list)
        {
            PMaisId e = (PMaisId) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._maisId_.add(e);
        }
    }

    public TIgual getIgual()
    {
        return this._igual_;
    }

    public void setIgual(TIgual node)
    {
        if(this._igual_ != null)
        {
            this._igual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._igual_ = node;
    }

    public PExp getInit()
    {
        return this._init_;
    }

    public void setInit(PExp node)
    {
        if(this._init_ != null)
        {
            this._init_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._init_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._objeto_)
            + toString(this._ponto_)
            + toString(this._id_)
            + toString(this._maisId_)
            + toString(this._igual_)
            + toString(this._init_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._objeto_ == child)
        {
            this._objeto_ = null;
            return;
        }

        if(this._ponto_ == child)
        {
            this._ponto_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._maisId_.remove(child))
        {
            return;
        }

        if(this._igual_ == child)
        {
            this._igual_ = null;
            return;
        }

        if(this._init_ == child)
        {
            this._init_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._objeto_ == oldChild)
        {
            setObjeto((TObjeto) newChild);
            return;
        }

        if(this._ponto_ == oldChild)
        {
            setPonto((TPonto) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PMaisId> i = this._maisId_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMaisId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._igual_ == oldChild)
        {
            setIgual((TIgual) newChild);
            return;
        }

        if(this._init_ == oldChild)
        {
            setInit((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
