/* This file was generated by SableCC (http://www.sablecc.org/). */

package bemtevi.node;

import java.util.*;
import bemtevi.analysis.*;

@SuppressWarnings("nls")
public final class AAtributoAtributo extends PAtributo
{
    private TId _id_;
    private final LinkedList<PMaisAtributo> _maisAtributo_ = new LinkedList<PMaisAtributo>();

    public AAtributoAtributo()
    {
        // Constructor
    }

    public AAtributoAtributo(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<?> _maisAtributo_)
    {
        // Constructor
        setId(_id_);

        setMaisAtributo(_maisAtributo_);

    }

    @Override
    public Object clone()
    {
        return new AAtributoAtributo(
            cloneNode(this._id_),
            cloneList(this._maisAtributo_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAtributoAtributo(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PMaisAtributo> getMaisAtributo()
    {
        return this._maisAtributo_;
    }

    public void setMaisAtributo(List<?> list)
    {
        for(PMaisAtributo e : this._maisAtributo_)
        {
            e.parent(null);
        }
        this._maisAtributo_.clear();

        for(Object obj_e : list)
        {
            PMaisAtributo e = (PMaisAtributo) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._maisAtributo_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._maisAtributo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._maisAtributo_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PMaisAtributo> i = this._maisAtributo_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMaisAtributo) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
