Package bemtevi;

Helpers
 digito = ['0' .. '9'];
 minusculo = ['a' .. 'z'];
 maiusculo = ['A' .. 'Z'];
 letra = (maiusculo | minusculo);
 letras = letra*;
 digitos = digito*;
 numero_real = digitos+','+digitos;
 id_cientifico = ('e' | 'E');
 notacao_cientifica = digito+id_cientifico+('-'?)+digitos;
 letras_ou_digitos = letras | digitos;
 underline = '_';
 espaco = ' ';
 tudo_unicode = [0..0xffff];
 string_input = [tudo_unicode - ['''+'"']];
 comentario_blc = [tudo_unicode - '{'];
 rc = 13;
 nl = 10;
 ht	= 0x0009;
 lf	= 0x000a;
 ff	= 0x000c;
 cr	= 0x000d;
 eol = cr | nl | cr | nl ;
 blank = rc | nl | ht | lf | ff | cr;
 
Tokens

 // Atributos Principais
 molde = 'molde';
 se = 'se';
 senao = 'senao';
 passa = 'passa';
 por = 'por';
 contem = 'contem';
 fim = 'fim';
 constante = 'constante';
 funcao = 'funcao';
 objeto = 'objeto';
 string = (''' string_input* ''' | '"' string_input* '"');
 
 // Tipos
 bool = 'Bool';
 numero = 'Numero';
 texto = 'Texto';
 verdade = 'verdade';
 falso = 'falso';
 

 // Operacoes Matematicas e Logicas
 numeros = digitos | numero_real | notacao_cientifica;
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 mod = '%';
 atribuicao = '=';
 menor = '<';
 menor_igual = '<=';
 comparacao = '==';
 negacao = '!';
 dois_maior = '>>';
 
 // Delimitadores
 abre_bloco = '[';
 fecha_bloco = ']';
 par_esq = '(';
 par_dir = ')';
 dois_pontos = ':';
 virgula = ',';
 ponto_virgula = ';';
 ponto = '.';
 pipe = '|';
 
 // Identificadores
 id_molde = maiusculo letras_ou_digitos*;
 id = minusculo (letras_ou_digitos | underline)*;
 
 // Vazio
 vazio = (espaco | '\t' | '\n' | '\r' | blank)+;
 
 // Comentarios
 comentario_linha = ('--'[tudo_unicode-[cr+nl]]*);
 comentario_bloco = ('{'comentario_blc*'}');


Ignored Tokens
 comentario_bloco,
 comentario_linha,
 vazio;
 
Productions

 programa = {programa} familia? def_molde+;
 
 familia_opcional = {familia_opcional} ponto_virgula relacao;
 familia = {familia} relacao familia_opcional* ponto;
 
 relacao = {relacao} molde [esq]:id_molde se passa por [dir]:id_molde;
 
 def_molde = {def_molde} molde id_molde contem atributos metodos fim;
 
 attr_aux = {dec_cons} dec_cons | {dec_obj} dec_obj;
 atributos = {atributos} attr_aux*;
 metodos = {metodos} dec_funcao*;
 
 dec_cons = {dec_cons} constante dois_pontos tipo_primitivo id ponto_virgula;
 dec_obj = {dec_obj} objeto dois_pontos tipo_molde id ponto_virgula;
 
 tipo_primitivo = {bool} bool | {numero} numero | {texto} texto;
 tipo_molde = {tipo_molde} id_molde;
 tipo = {tipo_molde} tipo_molde | {tipo_primitivo} tipo_primitivo;
 
 dec_funcao =
 	{dec_funcao} dois_maior? funcao dois_pontos tipo id [fe]:par_esq parametros [fd]:par_dir bloco |
 	{dec_funcao_sem_bloco} dois_maior? funcao dois_pontos tipo id [fwbe]:par_esq parametros [fwbd]:par_dir ponto_virgula
 ;
 
 // A partir daqui precisa se feito
 
 bloco = {bloco} [teste1]:par_esq*;
 parametros = {parametros} [teste2]:par_dir*;
